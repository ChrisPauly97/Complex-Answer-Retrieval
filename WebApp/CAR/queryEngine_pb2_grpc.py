# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import queryEngine_pb2 as queryEngine__pb2


class QueryEngineStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.sendQuery = channel.unary_unary(
        '/queryEngine.QueryEngine/sendQuery',
        request_serializer=queryEngine__pb2.QueryRequest.SerializeToString,
        response_deserializer=queryEngine__pb2.QueryResponse.FromString,
        )


class QueryEngineServicer(object):
  """Interface exported by the server.
  """

  def sendQuery(self, request, context):
    """A simple RPC.

    Obtains the query at a given position.

    A feature with an empty name is returned if there's no feature at the given
    position.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_QueryEngineServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'sendQuery': grpc.unary_unary_rpc_method_handler(
          servicer.sendQuery,
          request_deserializer=queryEngine__pb2.QueryRequest.FromString,
          response_serializer=queryEngine__pb2.QueryResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'queryEngine.QueryEngine', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
